2023-02-25 12:17:01,906{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin ../echo/main --node-count 1 --time-limit 10
2023-02-25 12:17:01,961{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x67171221"
         "maelstrom.db$db$reify__16142@67171221"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x1c7159d5" "2023-02-25T12:17:01.896-05:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x62cad0e8"
         "maelstrom.net$jepsen_net$reify__15251@62cad0e8"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x1659a0ff"
         "maelstrom.workload.echo$client$reify__16863@1659a0ff"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x1398e3aa"
         "java.util.concurrent.CyclicBarrier@1398e3aa"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x531bffd"
         "jepsen.checker$compose$reify__11881@531bffd"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "../echo/main"
  "--node-count"
  "1"
  "--time-limit"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@31c87223"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@6a4d72bd"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "../echo/main"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 10000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0xba76911"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@ba76911"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0xffb8f15"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@ffb8f15"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x1a0b51e7"
                                                    "maelstrom.workload.echo$workload$fn__16882@1a0b51e7"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x6f96d39f"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x5f49c09d"
         "maelstrom.net$jepsen_os$reify__15254@5f49c09d"]
 :time-limit 10
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-02-25 12:17:03,387{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-02-25 12:17:03,388{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-02-25 12:17:03,389{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-02-25 12:17:03,391{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-02-25 12:17:03,392{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-02-25 12:17:03,393{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ../echo/main []
2023-02-25 12:17:03,401{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n0 printed a line to STDOUT which was not well-formed JSON:
Hello, World!
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__15856.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
2023-02-25 12:17:10,400{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
